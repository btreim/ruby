

require 'csv'
require 'yaml'
require_relative 'hangman_array.rb'

def random_word_from(possible_solutions)
	max_length = possible_solutions.length
	index = rand(max_length)
	possible_solutions[index].downcase
end

def clean_input
	input = ""
	until input.match(/^[a-z]$/)
		puts "Please select one letter from A to Z"
		input = gets.chomp.downcase
	end
	input
end

def solution_matches(user_input, solution)
	if solution.include?(user_input)
		true
	else
		false
	end
end

def prompt_user(previous_guesses)
	if previous_guesses.length > 0
		puts "Previously Guessed Letters: #{previous_guesses.sort.join(",")}"
		clean_input
	else
		clean_input
	end
end

def draw_hangman(num_incorrect)
	puts $hangman[num_incorrect]
end

def save_game(variables)
end

def display_saved_games
	num = 0
	games = CSV.read('./saved/saves.txt')
	games.each do |game|
		puts "(#{num+=1}) #{game[0]}"
	end
	# selection = gets.chomp
end

def load_game(variables,selected)
	games = CSV.read('./saved/saves.txt')
	game_to_load = games.find do |g|
		g[0] == selected
	end
end

win = false
game_id = rand
dictionary = []
incorrect = 0
incorrect_limit = 6
previous_guesses = []
correct_guesses =[]

#Load dictionary
f = File.read("5desk.txt")
f.each_line {|word| dictionary << word.chomp}

#Start Game
print "

  /\\  /\\__ _ _ __ ___   __ _ _ __ ___   __ _ _ __  
 / /_/ / _` | '  _ \\ / _` | '_ ` _ \\ / _` | '_ \\ 
/ __  / (_| | | | | | (_| | | | | | | (_| | | | |
\\/ /_/ \\__,_| |_| |_|\\__, |_| |_| |_|\\__,_|_| |_|
                      |___/                       
"
#New game or Load old game? -> list available 
puts "(1) Start New Game \n(2) Load Game"

if gets.chomp == "2"
	puts "Please select a previous game to load."
	# puts Dir.entries('saved').select{|f| !File.file? f}
	display_saved_games
else

	puts "Starting a new game..."
	#Select random word from dictionary between 5-9 Characters and set equal to solution
	possible_solutions = dictionary.find_all do |word|
			word.to_s.length.between?(5,9)
		end

	solution = random_word_from(possible_solutions)
	solution = solution.split("")
	variables = [game_id, solution, incorrect, previous_guesses, correct_guesses]
	# save_game(variables)
	# REVEAL SOLUTION
	# puts "This is the solution: #{solution}"
end


solution.length.times{correct_guesses << "-"}


until win

	guess = prompt_user(previous_guesses)

	solution.each_with_index do |letter, index|
		if letter == guess
			correct_guesses[index] = guess
			# save_game(variables)
		end
	end

	previous_guesses << guess


	unless solution.include?(guess)
		puts "That was incorrect! Try again..."
		incorrect += 1
	end

	if correct_guesses == solution
		win = true
		10.times{puts "YOU WIN!"}
	elsif incorrect == incorrect_limit
		puts "YOU LOSE!

		'#{solution.join("")}' was the correct answer

		"
		draw_hangman(incorrect)
		break
	end

	draw_hangman(incorrect)
	puts "Solution: #{correct_guesses.join}"
	save_game(variables)
end

#<------USER GAME

